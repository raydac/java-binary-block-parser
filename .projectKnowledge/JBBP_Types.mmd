Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Fields

## Primitive<br/>types

### allowed types
> fillColor=`#FF9999`


#### bit\[:1\.\.7\]
> fillColor=`#9999FF`


##### 1 bit by default 
> fillColor=`#FF66FF`


#### bool
> fillColor=`#9999FF`


##### 8 bit field
> fillColor=`#99FFFF`


###### FALSE \(==0\)
> fillColor=`#CCFFCC`


####### 0 in write operations
> fillColor=`#CCFFCC`


###### TRUE \(\!=0\)
> fillColor=`#CCFFCC`


####### 1 in write operations
> fillColor=`#CCFFCC`


#### byte
> fillColor=`#9999FF`


##### 8 bit signed field
> fillColor=`#99FFFF`


#### ubyte
> fillColor=`#9999FF`


##### 8 bit unsigned field
> fillColor=`#99FFFF`


#### short
> fillColor=`#9999FF`


##### 16 bit signed field
> fillColor=`#99FFFF`


#### ushort
> fillColor=`#9999FF`


##### 16 bit unsigned field
> fillColor=`#99FFFF`


#### int
> fillColor=`#9999FF`


##### 32 bit signed field
> fillColor=`#99FFFF`


#### uint
> fillColor=`#9999FF`


##### 32 bit unsigned field
> fillColor=`#99FFFF`


###### requires long representation
> fillColor=`#FF6666`,mmd.emoticon=`error`


###### can throw error in expression if can't be converted into int
> fillColor=`#FF6666`,mmd.emoticon=`error`


#### long
> fillColor=`#9999FF`


##### 64 bit signed field
> fillColor=`#99FFFF`


#### floatj
> fillColor=`#FFFE9F`


##### 32 bit signed field<br/>\(Java float format\)
> fillColor=`#99FFFF`


#### doublej
> fillColor=`#FFFE9F`


##### 64 bit signed field<br/>\(Java double format\)
> fillColor=`#99FFFF`


#### stringj
> fillColor=`#FFFE9F`


##### UTF\-8 string with length info, NULL value is allowed
> fillColor=`#99FFFF`


#### var
> fillColor=`#00FAFF`


##### custom field to be processed by specific code 
> fillColor=`#00FAFF`


#### val
> fillColor=`#71B9FF`

- TOPIC
<pre>164BC0A19BEA</pre>

##### Virtual int field which value is calculated by expression
> fillColor=`#71B9FF`


#### CUSTOM TYPES
> fillColor=`#FFF56B`


##### list of types must be provided by external processor<br/>and the processor must provide read operations
> fillColor=`#FFF56B`


### format
> fillColor=`#FF9999`


#### \<field\_type\> \[\<field\_name\>\];
> fillColor=`#FFCC00`


##### int;
> fillColor=`#99FF99`


##### int data;
> fillColor=`#99FF99`


##### bit:3 bits;
> fillColor=`#99FF99`


##### bit:\(a\+1\) b;
> fillColor=`#99FF99`


## Complex types

### Arrays
> fillColor=`#9999FF`


#### \<field\_type\> '\['\<array\_length\>|\<expression\>|\_'\]' \[\<array\_name\>\];
> fillColor=`#FFCC00`,topicLinkUID=`152971A8B02A`


##### \<array\_length\> is hardcoded <br/>number of items
> fillColor=`#6666FF`,textColor=`#CCFFCC`


###### bit:3 \[1244\];
> fillColor=`#99FF99`


##### \<expression\> is some expression<br/>provides length of the array
> fillColor=`#6666FF`,textColor=`#CCFFCC`


###### int length; byte \[length\*2\] data;
> fillColor=`#99FF99`


##### '\_' means read whole stream <br/>untill the stream end
> fillColor=`#6666FF`,textColor=`#CCFFCC`


###### it is impossible to have fields after
> fillColor=`#FF3300`,textColor=`#FFFFFF`


###### long header; byte \[\_\] allData;
> fillColor=`#99FF99`


### Structures
> fillColor=`#9999FF`


#### \[\<structure\_name\>\]\['\['array\_length|expression|\_'\]'\]\{ \<fields\>\.\.\. \}
> fillColor=`#FFCC00`

- TOPIC
<pre>152971A8B02A</pre>

##### \{bit;\}
> fillColor=`#99FF99`


##### header \{ubyte sections; ubyte datalen;\}<br/>sections \[header\.sections\]\{byte \[header\.datalen\] data;\}
> fillColor=`#99FF99`


## Special
> leftSide=`true`


### Align stream
> fillColor=`#9999FF`


#### align\[:number\_of\_bytes|:\(expression\_in\_parentheses\)\]
> fillColor=`#FFCC00`


##### align; byte \[123\];
> fillColor=`#99FF99`,leftSide=`true`


##### align:4; byte\[123\];
> fillColor=`#99FF99`,leftSide=`true`


##### align:\($$\+45\); int data;
> fillColor=`#99FF99`,leftSide=`true`


#### by default<br/>align to 1 byte
> fillColor=`#FF66FF`


#### Skips bytes to align the byte<br/>counter to needed value
> fillColor=`#FFFFCC`

- TOPIC
<pre>1529753E90BA</pre>

### Byte counter
> fillColor=`#FF9999`,topicLinkUID=`1529753E90BA`


#### $$ in expressions
> fillColor=`#FF9999`


#### can be reset by special command
> fillColor=`#FFCB2F`,leftSide=`true`


##### reset$$;
> fillColor=`#FFCB2F`


### Skip bytes
> fillColor=`#9999FF`


#### Skips needed number of bytes
> fillColor=`#FFFFCC`

- TOPIC
<pre>1529753E90BA</pre>

#### by default<br/>skip 1 byte
> fillColor=`#FF66FF`


#### skip\[:number\_of\_bytes|\(expression\_in\_parentheses\)\]
> fillColor=`#FFCC00`


##### skip; int;
> fillColor=`#99FF99`


##### skip:34; byte;
> fillColor=`#99FF99`,leftSide=`true`


##### skip:\($$\*2\); int data;
> fillColor=`#99FF99`,leftSide=`true`


### Virtual field
> fillColor=`#71B9FF`,leftSide=`true`,topicLinkUID=`164BC0A19BEA`


#### val:\(\<expression\>\) \<name\>
> fillColor=`#FFC522`


##### val:45 a;
> fillColor=`#63FF8F`


##### val:\(a\+b\) c;
> fillColor=`#63FF8F`,leftSide=`true`


#### must be named
> fillColor=`#FFFF00`


#### allows to set a value <br/>calculated by expression
> fillColor=`#FFFF00`,leftSide=`true`


#### doesn't take part in read\-write
> fillColor=`#FFFF00`,leftSide=`true`


## Byte order
> leftSide=`true`


### \[\<|\>\]\<filed\_type\>\.\.\.
> fillColor=`#FFCC33`


#### \>
> fillColor=`#FF99FF`


##### Big\-Endinan

###### \>int \[26\] data;
> fillColor=`#99FF99`


##### It is the default value and<br/>can be omitted
> fillColor=`#FF6666`


#### \<
> fillColor=`#FF99FF`


##### Little\-Endian
> leftSide=`true`


###### \<long data;
> fillColor=`#99FF99`

