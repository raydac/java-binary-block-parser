def getProp(name) {
    String found = project.findProperty(name)
    if (found == null) {
        GradleException('Property not found: ' + name)
    } else {
        return project.getProperty(name)
    }
}

def jbbpVersion = getProp('jbbp_plugin_version')
def metaLibVersion = getProp('meta_lib_version')
def commonsIoVersion = getProp('commons_io_version')
def junitVersion = getProp('junit_version')

group = 'com.igormaznitsa'
version = jbbpVersion

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation "commons-io:commons-io:" + commonsIoVersion
    implementation "com.igormaznitsa:meta-annotations:" + metaLibVersion
    implementation "com.igormaznitsa:meta-utils:" + metaLibVersion

    testImplementation "junit:junit:" + junitVersion
}

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:1.1.0"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

task sourcesJar(type: Jar) {
    duplicatesStrategy = 'include'
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

sourceSets {
    main {
        java {
            srcDirs '../../jbbp/src/main/java'
            srcDirs 'src/main/java'
            srcDirs '../jbbp-plugin-common/src/main/java'
        }
    }
}

gradlePlugin {
    website = 'https://github.com/raydac/java-binary-block-parser'
    vcsUrl = 'https://github.com/raydac/java-binary-block-parser'
    plugins {
        jbbpPlugin {
            id = 'com.igormaznitsa.gradle.jbbp'
            displayName = 'JBBP Sources Generator plugin'
            implementationClass = 'com.igormaznitsa.jbbp.plugin.gradle.JBBPPlugin'
            description = 'The plug-in processes JBBP scripts and generate Java classes from them'
            tags = ['jbbp', 'converter']
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}