def getProp(name, defaultValue) {
    String found = project.findProperty(name)
    if (found == null) {
        logger.warn('Can not find provided property "' + name + '", default value ' + defaultValue + ' in use')
        return defaultValue
    } else {
        return project.getProperty(name)
    }
}

def jbbpVersion = getProp('jbbp_plugin_version', '2.0.4')
def metaLibVersion = getProp('meta_lib_version', '1.1.2')

group = 'com.igormaznitsa'
version = jbbpVersion

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'commons-io:commons-io:2.11.0'

    implementation "com.igormaznitsa:meta-annotations:" + metaLibVersion
    implementation "com.igormaznitsa:meta-utils:" + metaLibVersion

    testImplementation 'junit:junit:4.13.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:1.0.0"
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy = 'include'
    classifier = 'sources'
    from sourceSets.main.allSource
}

sourceSets {
    main {
        java {
            srcDirs '../../jbbp/src/main/java'
            srcDirs 'src/main/java'
            srcDirs '../jbbp-plugin-common/src/main/java'
        }
    }
}

pluginBundle {
    website = 'https://github.com/raydac/java-binary-block-parser'
    vcsUrl = 'https://github.com/raydac/java-binary-block-parser'
    tags = ['jbbp', 'converter']
}

gradlePlugin {
    plugins {
        jbbpPlugin {
            id = 'com.igormaznitsa.gradle.jbbp'
            displayName = 'JBBP Sources Generator plugin'
            description = 'Plugin allows to generate Java classes from JBBP scripts'
            implementationClass = 'com.igormaznitsa.jbbp.plugin.gradle.JBBPPlugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}